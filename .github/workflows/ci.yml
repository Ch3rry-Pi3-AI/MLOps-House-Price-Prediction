name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip and install uv
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade uv

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock', 'requirements.txt') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Create venv with uv & install deps
        run: |
          uv venv --python python${{ matrix.python-version }}
          source .venv/bin/activate
          if [ -f requirements.txt ]; then
            uv pip install -r requirements.txt
          fi
          uv pip install pytest

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest -q

  data-processing:
    name: Data processing & features (invoke)
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Upgrade pip and install uv
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade uv

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-3.13-${{ hashFiles('uv.lock', 'requirements.txt') }}
          restore-keys: |
            uv-${{ runner.os }}-3.13-

      - name: Create venv with uv & install deps (incl. invoke)
        run: |
          uv venv --python python3.13
          source .venv/bin/activate
          if [ -f requirements.txt ]; then
            uv pip install -r requirements.txt
          fi
          uv pip install invoke

      - name: Show repo tree (debug)
        run: |
          pwd
          ls -la
          echo "--- src candidates ---"
          find src -maxdepth 3 -type f -name "*.py" -print || true

      - name: Check raw data presence
        run: |
          set -e
          if [ -f "data/raw/house_data.csv" ]; then
            echo "✅ Found data/raw/house_data.csv"
          else
            echo "❌ Missing data/raw/house_data.csv"
            echo "   Commit a small fixture or adjust the --input path passed to 'inv preprocess'."
            exit 1
          fi

      - name: Ensure directories
        run: |
          source .venv/bin/activate
          python -m invoke ensure-dirs

      - name: Preprocess (invoke)
        run: |
          source .venv/bin/activate
          python -m invoke preprocess \
            --input data/raw/house_data.csv \
            --output data/processed/cleaned_house_data.csv \
            --policy filter \
            --target price \
            --iqr 1.5 \

      - name: Engineer features (invoke)
        run: |
          source .venv/bin/activate
          python -m invoke engineer \
            --input data/processed/cleaned_house_data.csv \
            --output data/processed/engineered_features.csv \
            --preprocessor models/trained/preprocessor.pkl

      - name: Upload engineered data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: engineered-features
          path: data/processed/engineered_features.csv

      - name: Upload preprocessor
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preprocessor
          path: models/trained/preprocessor.pkl
  model-training:
    needs: data-processing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download engineered features
        uses: actions/download-artifact@v4
        with:
          name: engineered-features
          path: data/processed/

      - name: Download preprocessor
        uses: actions/download-artifact@v4
        with:
          name: preprocessor
          path: models/trained/

      - name: Set up MLflow
        run: |
          docker pull ghcr.io/mlflow/mlflow:latest
          docker run -d --rm \
            -p 5000:5000 \
            --name mlflow-server \
            ghcr.io/mlflow/mlflow:latest \
            mlflow server \
              --host 0.0.0.0 \
              --backend-store-uri sqlite:///mlflow.db

      - name: Wait for MLflow to start
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:5000/ > /dev/null; then
              echo "MLflow is up"; break
            fi
            echo "Waiting for MLflow... ($i)"
            sleep 2
          done

      - name: Train model
        run: |
          mkdir -p models
          python src/models/train_model.py \
            --config configs/model_config.yaml \
            --data data/processed/engineered_features.csv \
            --models-dir models \
            --mlflow-tracking-uri http://localhost:5000

      - name: Upload trained model
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: models/

      - name: Clean up MLflow
        if: always()
        run: |
          docker stop mlflow-server || true

  build-and-publish:
    needs: model-training
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download trained model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: models/

      - name: Download preprocessor
        uses: actions/download-artifact@v4
        with:
          name: preprocessor
          path: models/trained/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: docker.io/${{ vars.DOCKERHUB_USERNAME }}/house-price-model:latest
